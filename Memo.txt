# 절대 State를 직접적으로 수정하지 않아. 항상 수정하는 함수를 사용하는 거다.

# '...'전개연산자: 배열이나 객체의 요소를 펼쳐서 개별 요소로 분리하는 역할.

# map은 자바스크립트 함수.
  map은 안에 함수를 넣을 수 있도록 해주는데, 이 함수는 Array의 모든 Item에 대해 실행이 된다.
  그 함수가 실행되서 무엇을 return 하던지간에 return 한 값을 새로운 Array로 생성을 해준다.
  결국 배열안에 Item이 4개가 있다면, 각각의 Item마다 함수를 실행해서 총 4번의 함수가 실행이 된다.
  추가로 map의 두 번째 인자로는 index를 받는다. 아래의 나중에 아래의 코드를 참고.
  {toDos.map((item, index) => <li key={index}>{item}</li>)}
  map에는 항상 key값이 필요하다.

# #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### 

# fetch().then()

# response.json() : JSON 형식의 응답 본문을 받아와서 JavsScript 객체로 변환하는 것을 의미한다.

# JavaScript 객체와 JSON 은 비슷해 보이지만 몇 가지 차이점이 있다.
  1. JavaScript 객체는 속성 이름에 따옴표를 사용하지 않는다. 하지만 JSON은 모든 속성 이름은 반드시 큰따옴표로
     둘러싸여 있어야 한다.
  2. JavaScript 객체는 JavaScript의 모든 데이터 타입을 값으로 가질 수 있다. 하지만 JSON은 기본적으로 문자열,
     숫자, 객체, 배열, 불리언, null 만 지원한다.
  3. JavaScript 객체는 메서드(함수)를 포함할 수 있지만, JSON은 메서드를 표현할 수 있는 방법이 없다.
  
  4. JavaScripit 객체는 주석을 사용할 수 있지만, JSON은 주석을 지원하지 않는다.

# JSON.stringify() : JavaScript 객체를 JSON 형식의 문자열로 변환.
# JSON.parse() : JSON 형식의 문자열을 JavaScript 객체로 변환한다.

# #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### #### 

# 보통은 fetch().then() 을 사용하지 않았을 거야. 
  요즘 좀 더 보편적으로 사용하는 게 있는데, 이거 대신 async-await을 사용해.
  Ex: 
  const getMovies = async() => {
    const RATING = 8.5
    const response = await fetch(`https://yts.mx/api/v2/list_movies.json?minimum_rating=${RATING}&sort_by=year`)
    const json = await response.json();
    setMovies(json.data.movies);
    setLoading(false);
  }

# React Router가 하는 것은 페이지를 전환하는거다.

# npm install react-router-dom

# <React.StrictMode> 은 React의 strict mode(엄격한 모드)를 활성화하는 컴포넌트이다.
  사용하면 애플리케이션 내에서 잠재적인 문제를 조기에 감지하고 경고 메시지를 출력하여 개발자에게
  알려주는 도구.

# Route별로 생각을 해봐야 한다.
  home router를 두고 이 곳에서 모든 영화를 보여줄거고
  movie router를 두고 그 곳에서는 영화 하나만 보여줄 예정이다.

# useParams() --> 내가 router의 /:id 값을 가져온다.

# npm i gh-pages

# 결과물을 github pages 에 업로드 할 수 있게 해주는 나이스한 패키지.
  github pages는 github에서 제공하는 무료 서비스인데
  내가 html, css, javascript를 올리면 그걸 웹사이트로 만들어서 전세계에 무료로 배포해준다.

# 가장 먼저 해야 할 건, package.json에 있는 scripts를 확인하는 거다.
  package.json에는 build라는 script가 있다.
  이 script를 실행하면 나의 웹사이트의 production ready code를 생성하게 된다.
  production ready란 코드가 압축되고 모든게 최적화 된다는 의미야. 

# 실행하고 나면 'build'라는 폴더가 생긴다. 거기 있는 게 다 압축이 된거다.
  이제 이걸 Github pages에 push 해야한다.

# push 하기전에 내가 해야할 건 package.json으로 가서 마지막에 콤마를 찍어주고
  "homepage"라고 적어준다.
  Ex: "homepage": "https://[깃허브유저네임].github.io/[코드가 들어있는 github repository]

# 다른 script를 하나 만들어줄건데 deploy 이다.
  deploy가 하는 일은 우리가 방금 설치한 gh-pages를 실행시키고 "buil"라는 디렉토리를 가져간다.
  나는 먼저 build를 하고 난 다음에 deploy를 해야 한다는걸 기억하고 싶지 않기 때문에
  predeploy command를 만들어 준다. 그렇게 되면 predeploy가 자동으로 먼저 실행이 된다.

# Ex: "deploy": "gh-pages -d build",  # homepage에 적어놓은 웹사이트에 업로드하도록 한다.
      "predeploy": "npm run build"


      

